// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: math_opt_benchmark/proto/model.proto

#include "math_opt_benchmark/proto/model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace math_opt_benchmark {
constexpr BenchmarkInstance::BenchmarkInstance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : model_updates_()
  , update_objectives_()
  , _update_objectives_cached_byte_size_()
  , initial_model_(nullptr)
  , init_objective_(0){}
struct BenchmarkInstanceDefaultTypeInternal {
  constexpr BenchmarkInstanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BenchmarkInstanceDefaultTypeInternal() {}
  union {
    BenchmarkInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BenchmarkInstanceDefaultTypeInternal _BenchmarkInstance_default_instance_;
}  // namespace math_opt_benchmark
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::math_opt_benchmark::BenchmarkInstance, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::math_opt_benchmark::BenchmarkInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::math_opt_benchmark::BenchmarkInstance, initial_model_),
  PROTOBUF_FIELD_OFFSET(::math_opt_benchmark::BenchmarkInstance, init_objective_),
  PROTOBUF_FIELD_OFFSET(::math_opt_benchmark::BenchmarkInstance, model_updates_),
  PROTOBUF_FIELD_OFFSET(::math_opt_benchmark::BenchmarkInstance, update_objectives_),
  0,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::math_opt_benchmark::BenchmarkInstance)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::math_opt_benchmark::_BenchmarkInstance_default_instance_),
};

const char descriptor_table_protodef_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$math_opt_benchmark/proto/model.proto\022\022"
  "math_opt_benchmark\032\034ortools/math_opt/mod"
  "el.proto\032#ortools/math_opt/model_update."
  "proto\"\345\001\n\021BenchmarkInstance\022D\n\rinitial_m"
  "odel\030\001 \001(\0132(.operations_research.math_op"
  "t.ModelProtoH\000\210\001\001\022\026\n\016init_objective\030\002 \001("
  "\001\022E\n\rmodel_updates\030\003 \003(\0132..operations_re"
  "search.math_opt.ModelUpdateProto\022\031\n\021upda"
  "te_objectives\030\004 \003(\001B\020\n\016_initial_modelb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto_deps[2] = {
  &::descriptor_table_ortools_2fmath_5fopt_2fmodel_2eproto,
  &::descriptor_table_ortools_2fmath_5fopt_2fmodel_5fupdate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto = {
  false, false, 365, descriptor_table_protodef_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto, "math_opt_benchmark/proto/model.proto", 
  &descriptor_table_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto_once, descriptor_table_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto::offsets,
  file_level_metadata_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto, file_level_enum_descriptors_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto, file_level_service_descriptors_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto);
  return descriptor_table_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto(&descriptor_table_math_5fopt_5fbenchmark_2fproto_2fmodel_2eproto);
namespace math_opt_benchmark {

// ===================================================================

class BenchmarkInstance::_Internal {
 public:
  using HasBits = decltype(std::declval<BenchmarkInstance>()._has_bits_);
  static const ::operations_research::math_opt::ModelProto& initial_model(const BenchmarkInstance* msg);
  static void set_has_initial_model(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::operations_research::math_opt::ModelProto&
BenchmarkInstance::_Internal::initial_model(const BenchmarkInstance* msg) {
  return *msg->initial_model_;
}
void BenchmarkInstance::clear_initial_model() {
  if (GetArena() == nullptr && initial_model_ != nullptr) {
    delete initial_model_;
  }
  initial_model_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
void BenchmarkInstance::clear_model_updates() {
  model_updates_.Clear();
}
BenchmarkInstance::BenchmarkInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  model_updates_(arena),
  update_objectives_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:math_opt_benchmark.BenchmarkInstance)
}
BenchmarkInstance::BenchmarkInstance(const BenchmarkInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      model_updates_(from.model_updates_),
      update_objectives_(from.update_objectives_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_initial_model()) {
    initial_model_ = new ::operations_research::math_opt::ModelProto(*from.initial_model_);
  } else {
    initial_model_ = nullptr;
  }
  init_objective_ = from.init_objective_;
  // @@protoc_insertion_point(copy_constructor:math_opt_benchmark.BenchmarkInstance)
}

void BenchmarkInstance::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&initial_model_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&init_objective_) -
    reinterpret_cast<char*>(&initial_model_)) + sizeof(init_objective_));
}

BenchmarkInstance::~BenchmarkInstance() {
  // @@protoc_insertion_point(destructor:math_opt_benchmark.BenchmarkInstance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BenchmarkInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete initial_model_;
}

void BenchmarkInstance::ArenaDtor(void* object) {
  BenchmarkInstance* _this = reinterpret_cast< BenchmarkInstance* >(object);
  (void)_this;
}
void BenchmarkInstance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BenchmarkInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BenchmarkInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:math_opt_benchmark.BenchmarkInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_updates_.Clear();
  update_objectives_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && initial_model_ != nullptr) {
      delete initial_model_;
    }
    initial_model_ = nullptr;
  }
  init_objective_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BenchmarkInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .operations_research.math_opt.ModelProto initial_model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double init_objective = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          init_objective_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .operations_research.math_opt.ModelUpdateProto model_updates = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated double update_objectives = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_update_objectives(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_update_objectives(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BenchmarkInstance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:math_opt_benchmark.BenchmarkInstance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .operations_research.math_opt.ModelProto initial_model = 1;
  if (_internal_has_initial_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::initial_model(this), target, stream);
  }

  // double init_objective = 2;
  if (!(this->init_objective() <= 0 && this->init_objective() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_init_objective(), target);
  }

  // repeated .operations_research.math_opt.ModelUpdateProto model_updates = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_model_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_model_updates(i), target, stream);
  }

  // repeated double update_objectives = 4;
  if (this->_internal_update_objectives_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_update_objectives(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:math_opt_benchmark.BenchmarkInstance)
  return target;
}

size_t BenchmarkInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:math_opt_benchmark.BenchmarkInstance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .operations_research.math_opt.ModelUpdateProto model_updates = 3;
  total_size += 1UL * this->_internal_model_updates_size();
  for (const auto& msg : this->model_updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double update_objectives = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_update_objectives_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _update_objectives_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .operations_research.math_opt.ModelProto initial_model = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initial_model_);
  }

  // double init_objective = 2;
  if (!(this->init_objective() <= 0 && this->init_objective() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BenchmarkInstance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:math_opt_benchmark.BenchmarkInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const BenchmarkInstance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BenchmarkInstance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:math_opt_benchmark.BenchmarkInstance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:math_opt_benchmark.BenchmarkInstance)
    MergeFrom(*source);
  }
}

void BenchmarkInstance::MergeFrom(const BenchmarkInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:math_opt_benchmark.BenchmarkInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  model_updates_.MergeFrom(from.model_updates_);
  update_objectives_.MergeFrom(from.update_objectives_);
  if (from._internal_has_initial_model()) {
    _internal_mutable_initial_model()->::operations_research::math_opt::ModelProto::MergeFrom(from._internal_initial_model());
  }
  if (!(from.init_objective() <= 0 && from.init_objective() >= 0)) {
    _internal_set_init_objective(from._internal_init_objective());
  }
}

void BenchmarkInstance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:math_opt_benchmark.BenchmarkInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BenchmarkInstance::CopyFrom(const BenchmarkInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:math_opt_benchmark.BenchmarkInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BenchmarkInstance::IsInitialized() const {
  return true;
}

void BenchmarkInstance::InternalSwap(BenchmarkInstance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  model_updates_.InternalSwap(&other->model_updates_);
  update_objectives_.InternalSwap(&other->update_objectives_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BenchmarkInstance, init_objective_)
      + sizeof(BenchmarkInstance::init_objective_)
      - PROTOBUF_FIELD_OFFSET(BenchmarkInstance, initial_model_)>(
          reinterpret_cast<char*>(&initial_model_),
          reinterpret_cast<char*>(&other->initial_model_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BenchmarkInstance::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace math_opt_benchmark
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::math_opt_benchmark::BenchmarkInstance* Arena::CreateMaybeMessage< ::math_opt_benchmark::BenchmarkInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::math_opt_benchmark::BenchmarkInstance >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
